<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="mfmod" label="MMod">
    <memberTool name="symmetry_extrude"/>
    <memberTool name="edges_to_face"/>
    <memberTool name="divide_edges"/>
    <memberTool name="merge_verts"/>
    <memberTool name="scale_edges"/>
    <memberTool name="transform_primitives"/>
    <memberTool name="bend"/>
    <memberTool name="symmetrize"/>
    <memberTool name="part_mesh"/>
    <memberTool name="merge"/>
    <memberTool name="pivot_center"/>
    <memberTool name="pivot_selected"/>
    <memberTool name="set_plane"/>
  </toolshelf>

  <tool name="divide_edges" label="Divide Edges" icon="SOP_edgedivide">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_divide_edges')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="scale_edges" label="Scale Edges" icon="SOP_edgeflip">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_scale_edges')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="transform_primitives" label="TransformPrims" icon="SOP_primitive">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_transform_primitives')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="bend" label="Bend" icon="SOP_bend">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'animatrix::bend::2.00')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="merge_verts" label="Merge Verts" icon="SOP_fuse">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_merge_verts')

# fix for changing group
if geo.geometryType() == hou.geometryType.Points:
    node.parm('grouptype').set(3)
elif geo.geometryType() == hou.geometryType.Edges:
    node.parm('grouptype').set(2)
elif geo.geometryType() == hou.geometryType.Primitives:
    node.parm('grouptype').set(4)
    
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="symmetry_extrude" label="SymExtrude" icon="SOP_polyextrude">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_symmetry_extrude_v1')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="edges_to_face" label="EdgesToFace" icon="SOP_polycap">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_edgestoface')
node.parm('group').set(sel_str)
]]></script>
  </tool>

  <tool name="symmetrize" label="Symmetrize" icon="SOP_mirror">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_symmetrize')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="part_mesh" label="PartMesh" icon="SOP_blast">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

sel_nodes = hou.selectedNodes()

if sel_str and sel_nodes:

    main_node = sel_nodes[-1]

#    new_node = soptoolutils.genericTool(kwargs, 'blast')
    new_node = main_node.parent().createNode('blast')
    new_node.parm('negate').set(True)
    new_node.parm('group').set(sel_str)
    new_node.setNextInput(main_node)
    new_node.setDisplayFlag(True)
    new_node.setRenderFlag(True)
    new_node.setCurrent(True, clear_all_selected=True)
    new_node.moveToGoodPosition()

    final_merge = main_node.parent().createNode("merge")

    final_merge.setNextInput(main_node)
    final_merge.setNextInput(new_node)
    final_merge.setTemplateFlag(True)

    final_merge.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="pivot_center" label="PivotToCenter" icon="OBJ_null">
    <script scriptType="python"><![CDATA[sel_nodes = hou.selectedNodes()

for node in sel_nodes:
    if node.parmTuple('p'):
        node.parm('px').setExpression('$CEX')
        node.parm('py').setExpression('$CEY')
        node.parm('pz').setExpression('$CEZ')]]></script>
  </tool>

  <tool name="pivot_selected" label="PivotSelected" icon="OBJ_null">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

sel_nodes = hou.selectedNodes()

if sel_str and sel_nodes:
    blast_node = sel_nodes[-1].parent().createNode('blast')
    blast_node.setNextInput(sel_nodes[-1])

    # fix for changing group for Points only
    if geo.geometryType() == hou.geometryType.Points:
        blast_node.parm('grouptype').set(3)

    blast_node.parm('group').set(sel_str)
    blast_node.parm('negate').set(True)

    blast_node.moveToGoodPosition()

    trans_node = blast_node.createOutputNode('xform')
    trans_node.parm('px').setExpression('$CEX')
    trans_node.parm('py').setExpression('$CEY')
    trans_node.parm('pz').setExpression('$CEZ')
    trans_node.parmTuple('s').set((0, 0, 0))

    trans_node.moveToGoodPosition()

    if sel_nodes[-1].parmTuple('p'):
        p_pos = trans_node.geometry().points()[0].position()
        sel_nodes[-1].parmTuple('p').set(p_pos)

    trans_node.destroy()
    blast_node.destroy()
]]></script>
  </tool>

  <tool name="merge" label="Merge" icon="SOP_merge">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="cop_viewer">
      <contextNetType>COP2</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[sel_nodes = hou.selectedNodes()

if sel_nodes and len(sel_nodes) > 1:

    merge_node = sel_nodes[-1].parent().createNode('merge')
    merge_node.moveToGoodPosition()

    for node in sel_nodes:
        merge_node.setNextInput(node)

    merge_node.moveToGoodPosition()]]></script>
  </tool>

  <tool name="set_plane" label="Set C-Plane" icon="OBJ_null">
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

def set_origin(construction_plane, new_origin):
    translation = hou.hmath.buildTranslate(hou.Vector3(new_origin) - origin(construction_plane))
    construction_plane.setTransform(construction_plane.transform() * translation)

def origin(construction_plane):
    return hou.Vector3(0, 0, 0) * construction_plane.transform()

def set_normal(construction_plane, normal_vector):
    existing_rotation = hou.Matrix4(construction_plane.transform().extractRotationMatrix3())
    rotation = existing_rotation * normal(construction_plane).matrixToRotateTo(normal_vector)
    translation = hou.hmath.buildTranslate(origin(construction_plane))
    construction_plane.setTransform(rotation * translation)

def normal(construction_plane):
    return hou.Vector3(0, 0, 1) * construction_plane.transform().inverted().transposed()

def origin(construction_plane):
    return hou.Vector3(0, 0, 0) * construction_plane.transform()


sv = toolutils.sceneViewer()
cp = sv.constructionPlane()
#sel_nodes = hou.selectedNodes()

cp.setTransform(sv.curViewport().viewTransform())
#set_origin(cp, sel_nodes[-1].parmTuple('t').eval() )
set_origin(cp, sv.curViewport().viewPivot() )]]></script>
  </tool>
</shelfDocument>
