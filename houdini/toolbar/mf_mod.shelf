<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="mfmod" label="MfMod">
    <memberTool name="symmetry_extrude"/>
    <memberTool name="edges_to_face"/>
    <memberTool name="merge_verts"/>
    <memberTool name="divide_edges"/>
    <memberTool name="scale_edges"/>
    <memberTool name="transform_primitives"/>
    <memberTool name="bend"/>
    <memberTool name="symmetrize"/>
    <memberTool name="part_mesh"/>
  </toolshelf>

  <tool name="divide_edges" label="Divide Edges" icon="SOP_edgedivide">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_divide_edges')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="scale_edges" label="Scale Edges" icon="SOP_edgeflip">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_scale_edges')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="transform_primitives" label="TransformPrims" icon="SOP_primitive">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_transform_primitives')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="bend" label="Bend" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'animatrix::bend::2.00')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="merge_verts" label="Merge Verts" icon="SOP_fuse">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_merge_verts')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="symmetry_extrude" label="SymExtrude" icon="SOP_polyextrude">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_symmetry_extrude_v1')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="edges_to_face" label="EdgesToFace" icon="SOP_polycap">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_edgestoface')
node.parm('group').set(sel_str)
]]></script>
  </tool>

  <tool name="symmetrize" label="Symmetrize" icon="SOP_mirror">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_symmetrize')
node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="part_mesh" label="PartMesh" icon="SOP_blast">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

sel_nodes = hou.selectedNodes()

if sel_str and sel_nodes:

    main_node = sel_nodes[-1]

#    new_node = soptoolutils.genericTool(kwargs, 'blast')
    new_node = main_node.parent().createNode('blast')
    new_node.parm('negate').set(True)
    new_node.parm('group').set(sel_str)
    new_node.setNextInput(main_node)
    new_node.setDisplayFlag(True)
    new_node.setRenderFlag(True)
    new_node.setCurrent(True, clear_all_selected=True)
    new_node.moveToGoodPosition()

    final_merge = main_node.parent().createNode("merge")

    final_merge.setNextInput(main_node)
    final_merge.setNextInput(new_node)
    final_merge.setTemplateFlag(True)

    final_merge.moveToGoodPosition()
]]></script>
  </tool>
</shelfDocument>
