<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="mfmod" label="MMod">
    <memberTool name="symmetry_extrude"/>
    <memberTool name="edges_to_face"/>
    <memberTool name="falloff"/>
    <memberTool name="arc"/>
    <memberTool name="divide_edges"/>
    <memberTool name="scale_edges"/>
    <memberTool name="transform_primitives"/>
    <memberTool name="merge_verts"/>
    <memberTool name="part_mesh"/>
    <memberTool name="merge"/>
    <memberTool name="extract_to_object"/>
    <memberTool name="pivot_selected"/>
    <memberTool name="set_plane"/>
    <memberTool name="subdive"/>
    <memberTool name="select_even"/>
    <memberTool name="hard_gun_bool"/>
    <memberTool name="hard_gun_prim"/>
  </toolshelf>

  <tool name="divide_edges" label="Divide Edges" icon="SOP_edgedivide">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'mifth_divide_edges')
]]></script>
  </tool>

  <tool name="scale_edges" label="Scale Edges" icon="SOP_edgeflip">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

#viewer = toolutils.sceneViewer()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_scale_edges')
#node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="transform_primitives" label="TransformPrims" icon="SOP_primitive">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

#viewer = toolutils.sceneViewer()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_transform_primitives')
#node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="merge_verts" label="Merge Verts" icon="SOP_fuse">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

#viewer = toolutils.sceneViewer()
#geo = viewer.selectGeometry(ordered=True)
#sel_str = geo.mergedSelectionString()

kwargs['ordered'] = True
node = soptoolutils.genericTool(kwargs, 'mifth_merge_verts')

node.parm('merge_type').set('last')
#node.parm('grouptype').set('points')
]]></script>
  </tool>

  <tool name="symmetry_extrude" label="SymExtrude" icon="SOP_polyextrude">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

#viewer = toolutils.sceneViewer()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()

#if kwargs['ctrlclick']:
node = soptoolutils.genericTool(kwargs, 'mifth_symmetry_extrude_v1')
    #node.parm('group').set(sel_str)
#else:
#    soptoolutils.customStateTool(kwargs, 'polyextrude::2.0')]]></script>
  </tool>

  <tool name="edges_to_face" label="EdgesToFace" icon="SOP_polycap">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
#geo = viewer.selectGeometry(ordered=True)
#sel_str = geo.mergedSelectionString()


if viewer.currentGeometrySelection().selections()[0].numSelected() == 2:
    node = soptoolutils.genericTool(kwargs, 'mifth_edgestoface')
else:
    node = soptoolutils.genericTool(kwargs, 'polyfill')
    node.parm('fillmode').set(0)]]></script>
  </tool>

  <tool name="part_mesh" label="PartMesh" icon="SOP_blast">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()

if sel_str and geo.geometryType() == hou.geometryType.Primitives:

    main_node = cur_obj.displayNode()

    blast_2 = main_node.createOutputNode('blast', node_name='blast_base')
    blast_2.parm('negate').set(False)
    blast_2.parm('group').set(sel_str)

    blast_1 = main_node.createOutputNode('blast', node_name='blast_part')
    blast_1.parm('negate').set(True)
    blast_1.parm('group').set(sel_str)

    final_merge = main_node.parent().createNode("merge")

    final_merge.setNextInput(blast_2)

    final_merge.setNextInput(blast_1)

    final_merge.moveToGoodPosition()

    final_merge.setDisplayFlag(True)
    final_merge.setRenderFlag(True)
    final_merge.setCurrent(True, clear_all_selected=True)
]]></script>
  </tool>

  <tool name="pivot_center" label="PivotToCenter" icon="OBJ_null">
    <script scriptType="python"><![CDATA[sel_nodes = hou.selectedNodes()

for node in sel_nodes:
    if node.parmTuple('p'):
        if kwargs['ctrlclick']:
            node.parm('px').setExpression('$GCX')
            node.parm('py').setExpression('$GCY')
            node.parm('pz').setExpression('$GCZ')
        else:
            node.parm('px').setExpression('$CEX')
            node.parm('py').setExpression('$CEY')
            node.parm('pz').setExpression('$CEZ')]]></script>
  </tool>

  <tool name="pivot_selected" label="PivotCenter" icon="OBJ_null">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()

sel_nodes = hou.selectedNodes()

if sel_nodes:
    last_node = sel_nodes[-1]

    if last_node.parmTuple('p'):

        choice = hou.ui.displayMessage("Save the current hip file?", buttons=("Cenetr", "Group", "Pivot"))

        if choice == 2:

            geo = viewer.selectGeometry()
            sel_str = geo.mergedSelectionString()
    
            if sel_str:
                blast_node = last_node.parent().createNode('blast')
                blast_node.setNextInput(last_node)
        
                # fix for changing group for Points only
                if geo.geometryType() == hou.geometryType.Points:
                    blast_node.parm('grouptype').set(3)
        
                blast_node.parm('group').set(sel_str)
                blast_node.parm('negate').set(True)
        
                blast_node.moveToGoodPosition()
        
                trans_node = blast_node.createOutputNode('xform')
                trans_node.parm('px').setExpression('$CEX')
                trans_node.parm('py').setExpression('$CEY')
                trans_node.parm('pz').setExpression('$CEZ')
                trans_node.parmTuple('s').set((0, 0, 0))
        
                trans_node.moveToGoodPosition()
        
                p_pos = trans_node.geometry().points()[0].position()
                last_node.parmTuple('p').deleteAllKeyframes()
                last_node.parmTuple('p').set(p_pos)
        
                trans_node.destroy()
                blast_node.destroy()
    
        else:
            if choice == 1:
                last_node.parm('px').setExpression('$GCX')
                last_node.parm('py').setExpression('$GCY')
                last_node.parm('pz').setExpression('$GCZ')
            else:
                last_node.parm('px').setExpression('$CEX')
                last_node.parm('py').setExpression('$CEY')
                last_node.parm('pz').setExpression('$CEZ')]]></script>
  </tool>

  <tool name="merge" label="Merge" icon="SOP_merge">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="cop_viewer">
      <contextNetType>COP2</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[sel_nodes = hou.selectedNodes()

if sel_nodes and len(sel_nodes) > 1:

    merge_node = sel_nodes[-1].parent().createNode('merge')
    merge_node.moveToGoodPosition()

    for node in sel_nodes:
        merge_node.setNextInput(node)
        merge_node.setDisplayFlag(True)
        merge_node.setRenderFlag(True)
        merge_node.setCurrent(True, clear_all_selected=True)

    merge_node.moveToGoodPosition()]]></script>
  </tool>

  <tool name="set_plane" label="SetPlane" icon="OBJ_null">
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

def set_origin(construction_plane, new_origin):
    translation = hou.hmath.buildTranslate(hou.Vector3(new_origin) - origin(construction_plane))
    construction_plane.setTransform(construction_plane.transform() * translation)

def origin(construction_plane):
    return hou.Vector3(0, 0, 0) * construction_plane.transform()

def set_normal(construction_plane, normal_vector):
    existing_rotation = hou.Matrix4(construction_plane.transform().extractRotationMatrix3())
    rotation = existing_rotation * normal(construction_plane).matrixToRotateTo(normal_vector)
    translation = hou.hmath.buildTranslate(origin(construction_plane))
    construction_plane.setTransform(rotation * translation)

def set_direct_normal(construction_plane, normal_vector):
    rotation = hou.Vector3(0, 0, 1).matrixToRotateTo(normal_vector)
    translation = hou.hmath.buildTranslate(origin(construction_plane))
    construction_plane.setTransform(rotation * translation)

def normal(construction_plane):
    return hou.Vector3(0, 0, 1) * construction_plane.transform().inverted().transposed()

def origin(construction_plane):
    return hou.Vector3(0, 0, 0) * construction_plane.transform()


sv = toolutils.sceneViewer()
cp = sv.constructionPlane()
#sel_nodes = hou.selectedNodes()

choice = hou.ui.displayMessage("SetPlane:", buttons=("Axis-Aligned", "View", "Original"))

if choice == 1:
    cp.setTransform(sv.curViewport().viewTransform())
    set_origin(cp, sv.curViewport().viewPivot() )

elif choice == 2:
    cp.setTransform(hou.Vector3(0, 0, 1).matrixToRotateTo(hou.Vector3(0, 1, 0)))

else:
    cp.setTransform(sv.curViewport().viewTransform())
    set_origin(cp, sv.curViewport().viewPivot() )

    cp_n = normal(cp)
    cp_axis = 'x'

    if abs(cp_n[1]) > abs(cp_n[0]) and abs(cp_n[1]) > abs(cp_n[2]):
        cp_axis = 'y'
    if abs(cp_n[2]) > abs(cp_n[0]) and abs(cp_n[2]) > abs(cp_n[1]):
        cp_axis = 'z'

    if cp_axis == 'x':
        set_direct_normal(cp, hou.Vector3(1, 0, 0))
    elif cp_axis == 'y':
        set_direct_normal(cp, hou.Vector3(0, 1, 0))
    elif cp_axis == 'z':
        set_direct_normal(cp, hou.Vector3(0, 0, 1))]]></script>
  </tool>

  <tool name="subdive" label="Subdive" icon="SOP_subdivide">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

# Old
#node = soptoolutils.genericTool(kwargs, 'mifth_subdive_plus')

# New
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()
sel_nodes = hou.selectedNodes()

if sel_nodes and sel_nodes[-1].type().category().name() == 'Object':
    display_val = sel_nodes[-1].parm('viewportlod').eval()

    if display_val == 0:
        for node in sel_nodes:
            node.parm('viewportlod').set(5)
    else:
        for node in sel_nodes:
            node.parm('viewportlod').set(0)

elif cur_obj.type().category().name() == 'Object':
    display_val = cur_obj.parm('viewportlod').eval()

    if display_val == 0:
        cur_obj.parm('viewportlod').set(5)
    else:
        cur_obj.parm('viewportlod').set(0)]]></script>
  </tool>

  <tool name="falloff" label="Faloff" icon="SOP_edit">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

choice = hou.ui.displayMessage("Apply Transform?", buttons=("Linear", "Radial"))

if choice == 1:
    node = soptoolutils.genericTool(kwargs, 'mifth_edit_radial_falloff')

    bou = node.node('./bound1').geometry().boundingBox()
    bou_size = bou.sizevec()
    bou_min = bou.minvec()
    bou_max = bou.maxvec()
    bou_cr = bou.center()

    the_max = max( max(bou_size[0], bou_size[1]), bou_size[2])

    node.parm('set_to_size').pressButton()
    node.parmTuple('falloff_scale').set(hou.Vector3(the_max/2, the_max/2, the_max/2))

    node.parmTuple('p').set( node.parmTuple('falloff_pos').eval() )

else:
    node = soptoolutils.genericTool(kwargs, 'mifth_edit_falloff')

    bou = node.node('./bound1').geometry().boundingBox()
    bou_size = bou.sizevec()
    bou_min = bou.minvec()
    bou_max = bou.maxvec()
    bou_cr = bou.center()

#    c = node.parmTuple('./transform2/p').eval()
    node.parmTuple('p').set(bou_cr)

    if bou_size[0] >= bou_size[1] and bou_size[0] >= bou_size[2]:
        node.parm('set_to_axis').set(0)
    elif bou_size[1] >= bou_size[0] and bou_size[1] >= bou_size[2]:
        node.parm('set_to_axis').set(1)
    else:
        node.parm('set_to_axis').set(2)

    node.parm('set_pos_axis').pressButton()
]]></script>
  </tool>

  <tool name="select_even" label="Select Even" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
viewer_state = viewer.currentState()

geos = viewer.selectGeometry(ordered=True)

node = geos.nodes()[0]
geo = node.geometry()

prims = geos.selections()[0].prims(geo)
#prims = geo.globPrims(geos.selectionStrings()[0])

loop_1 = geo.primLoop([prims[-2], prims[-1]], hou.componentLoopType.Partial)
loop_2 = geo.primLoop([prims[-2], prims[-1]], hou.componentLoopType.Extended)

offset = loop_2.index(prims[-1]) + (len(loop_1) - 1)
nes_sel_str = geos.selectionStrings()[0]

if offset <= len(loop_2)-1:

    new_sel = list(prims)
    new_prim = loop_2[offset]
    new_numbr = new_prim.number()

    numz = []
    for prim in new_sel:
        numz.append(prim.number())

    # Add another polygon to selection
    if new_numbr not in numz:
        nes_sel_str = nes_sel_str + " " + str(new_numbr)

# modify selection
viewer.selectGeometry(use_existing_selection=False, initial_selection=nes_sel_str, initial_selection_type=hou.geometryType.Primitives, consume_selections=False, ordered=True)
    
#viewer.setCurrentState(viewer_state)]]></script>
  </tool>

  <tool name="arc" label="Arc" icon="SOP_circle">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'mifth_make_arc')]]></script>
  </tool>

  <tool name="tool_1" label="Boolean Merged" icon="SOP_boolean">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()
sel_nodes = hou.selectedNodes()

if sel_str and sel_nodes and geo.geometryType() == hou.geometryType.Primitives:

    main_node = sel_nodes[-1]

    blast_2 = main_node.parent().createNode('blast', node_name='blast_base')
    blast_2.parm('negate').set(False)
    blast_2.parm('group').set(sel_str)
    blast_2.setNextInput(main_node)
    blast_2.parm('negate').set(True)
    blast_2.moveToGoodPosition()

    blast_1 = main_node.parent().createNode('blast', node_name='blast_part')
    blast_1.parm('group').set(sel_str)
    blast_1.setNextInput(main_node)
    blast_1.moveToGoodPosition()

    final_node = main_node.parent().createNode("boolean")
    final_node.setInput(0, blast_2)
    final_node.setInput(1, blast_1)
    final_node.moveToGoodPosition()

    final_node.setDisplayFlag(True)
    final_node.setRenderFlag(True)
    final_node.setCurrent(True, clear_all_selected=True)]]></script>
  </tool>

  <tool name="extract_to_object" label="Extract To Object" icon="SHELF_extract_object">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()
sel_nodes = hou.selectedNodes()

if sel_str and sel_nodes and geo.geometryType() == hou.geometryType.Primitives:

    main_node = sel_nodes[-1]


    the_pre_obj = main_node.parent()
    the_obj = None
    for i in range(1000):
        if the_pre_obj.type().category() == hou.objNodeTypeCategory():
            the_obj = the_pre_obj
            break

        the_pre_obj = the_pre_obj.parent()
        

    if the_obj:
        parent_obj = the_obj.parent()
    
        blast_1 = main_node.createOutputNode('blast')
        blast_1.parm('group').set(sel_str)
        #blast_1.setNextInput(main_node)
        #blast_1.moveToGoodPosition()

        blast_1.setDisplayFlag(True)
        blast_1.setRenderFlag(True)
        blast_1.setCurrent(True, clear_all_selected=True)
    
        new_obj = parent_obj.createNode('geo', the_obj.name(), run_init_scripts=False)
        new_obj.parm('use_dcolor').set(False)
        new_obj.moveToGoodPosition()
    
        obj_merge = new_obj.createNode("object_merge")
        obj_merge.parm('objpath1').set(obj_merge.relativePathTo(main_node))
        obj_merge.parm('xformtype').set(1)
        obj_merge.moveToGoodPosition()
    
        blast_2 = new_obj.createNode('blast')
        blast_2.parm('group').set(sel_str)
        blast_2.setNextInput(obj_merge)
        blast_2.parm('negate').set(True)
        blast_2.moveToGoodPosition()

        blast_2.setHardLocked(True)
        blast_2.setDisplayFlag(True)
        blast_2.setRenderFlag(True)
        blast_2.setCurrent(True, clear_all_selected=True)]]></script>
  </tool>

  <tool name="hard_gun_bool" label="HardGunBool" icon="SOP_boolean-2.0">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
sel_nodes = hou.selectedNodes()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

mesh_length = 100

if sel_nodes and len(sel_nodes) == 2:

    n_mesh = sel_nodes[1]
    n_mesh_2 = sel_nodes[0]

    n_mesh.setSelectableTemplateFlag(False)
    n_mesh.setTemplateFlag(False)

    # if mesh is an open curve'
    if n_mesh_2.type().name() == 'curve':
        n_mesh_2.parm('close').set(True)

        normal_node = n_mesh_2.createOutputNode("normal")
        normal_node.parm('type').set(0)
        normal_node.setColor( hou.Color((0.9, 0.72, 0.4)) )
        

        attr_prom = normal_node.createOutputNode("attribpromote")
        attr_prom.parm('inname').set('N')
        attr_prom.parm('inclass').set(2)
        attr_prom.parm('outclass').set(0)
        attr_prom.parm('method').set(2)
        attr_prom.parm('useoutname').set(True)
        attr_prom.parm('outname').set('pr_n')
        attr_prom.parm('deletein').set(True)
        attr_prom.setColor( hou.Color((0.9, 0.72, 0.4)) )
        
        trans_axis = attr_prom.createOutputNode("xformaxis")
        trans_axis.parm('origx').setExpression('$GCX')
        trans_axis.parm('origy').setExpression('$GCY')
        trans_axis.parm('origz').setExpression('$GCZ')
        trans_axis.parm('dirx').setExpression('@pr_n.x')
        trans_axis.parm('diry').setExpression('@pr_n.y')
        trans_axis.parm('dirz').setExpression('@pr_n.z')
        trans_axis.parm('trans').set(-mesh_length)
        trans_axis.parm('scale').set(0)
        trans_axis.setColor( hou.Color((0.9, 0.72, 0.4)) )
        

        extr_node = trans_axis.createOutputNode("polyextrude::2.0")
        extr_node.parm('outputback').set(True)
        extr_node.parm('xformfront').set(True)
        extr_node.parm('xformspace').set(0)
        extr_node.parm('translatez').set(mesh_length * 2)
        #extr_node.parm('dist').set(mesh_length * 2)
        extr_node.setColor( hou.Color((0.9, 0.72, 0.4)) )
    
        second_node = extr_node
    else:
        second_node = n_mesh_2

    choice = hou.ui.displayMessage("Mirror?", buttons=("No", "X", "Y", "Z"))

    if choice in (1, 2, 3):
        choice_clip = hou.ui.displayMessage("Clip?", buttons=("Yes", "No",))

        # add clip
        if choice_clip == 0:
            clip_node = second_node.createOutputNode("clip")

            if choice == 1:
                clip_node.parmTuple('dir').set((1, 0, 0))
            elif choice == 2:
                clip_node.parmTuple('dir').set((0, 1, 0))
            elif choice == 3:
                clip_node.parmTuple('dir').set((0, 0, 1))

            clip_node.setColor( hou.Color((0.8, 0.65, 0.9)) )

            mir_node = clip_node.createOutputNode("mirror")

        # no clip
        else:
            mir_node = second_node.createOutputNode("mirror")
            mir_node.parm('consolidatepts').set(False)

        if choice == 2:
            mir_node.parmTuple('dir').set( (0, 1, 0) )
        elif choice == 3:
            mir_node.parmTuple('dir').set( (0, 0, 1) )

        mir_node.setColor( hou.Color((0.8, 0.65, 0.9)) )
        second_node = mir_node
    

    b_group = n_mesh.createOutputNode("groupcreate")
    b_group.parm('groupname').set('hard_gun')
    b_group.parm('grouptype').set(0)
    b_group.parm('basegroup').set(sel_str)
    b_group.setColor( hou.Color((0.9, 0.65, 0.8)) )

    b_connect = b_group.createOutputNode("connectivity")
    b_connect.parm('connecttype').set(1)
    b_connect.setColor( hou.Color((0.8, 0.65, 0.9)) )
#    bool_node.moveToGoodPosition()

    b_block_begin = b_connect.createOutputNode("block_begin")
    b_block_begin.parm('method').set(1)
    b_block_begin.setColor( hou.Color((0.8, 0.65, 0.9)) )

    bool_node = b_block_begin.createOutputNode("boolean::2.0")
    bool_node.parm('agroup').set('hard_gun')
    #bool_node.parm('resolvea').set(False)
    bool_node.parm('resolveb').set(False)
    bool_node.parm('booleanop').set(2)
    bool_node.setNextInput(second_node)
    bool_node.setColor( hou.Color((0.9, 0.65, 0.8)) )

    b_block_end = bool_node.createOutputNode("block_end")
    b_block_end.parm('itermethod').set(1)
    b_block_end.parm('method').set(1)
    b_block_end.parm('class').set(0)
    b_block_end.parm('useattrib').set(1)
    b_block_end.parm('attrib').set('class')
    b_block_end.parm('blockpath').set('../' + b_block_begin.name())
    b_block_end.parm('templatepath').set('../' + b_block_begin.name())
    b_block_end.setColor( hou.Color((0.8, 0.65, 0.9)) )

    b_block_begin.parm('blockpath').set('../' + b_block_end.name())

    # make new connections for the merge node
    for connects in n_mesh.outputConnections():
        out_node = connects.outputNode()
        in_idx = connects.inputIndex()
        out_idx = connects.outputIndex()

        if out_node.name() != b_group.name():
            out_node.setInput(out_idx, b_block_end, in_idx)
            out_node.moveToGoodPosition()

    #b_block_end.setDisplayFlag(True)
    #b_block_end.setRenderFlag(True)
    b_block_end.setCurrent(True, clear_all_selected=True)

else:
    msg = 'Select 2 SOP Nodes!'
    hou.ui.displayMessage(msg)]]></script>
  </tool>

  <tool name="hard_gun_prim" label="HardGunPrim" icon="SOP_boolean-2.0">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()


print hou.selectedNodes()[-1]]]></script>
  </tool>
</shelfDocument>
