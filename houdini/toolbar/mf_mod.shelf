<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="mfmod" label="MMod">
    <memberTool name="symmetry_extrude"/>
    <memberTool name="edges_to_face"/>
    <memberTool name="falloff"/>
    <memberTool name="arc"/>
    <memberTool name="divide_edges"/>
    <memberTool name="scale_edges"/>
    <memberTool name="transform_primitives"/>
    <memberTool name="merge_verts"/>
    <memberTool name="part_mesh"/>
    <memberTool name="merge"/>
    <memberTool name="pivot_selected"/>
    <memberTool name="set_plane"/>
    <memberTool name="subdive"/>
    <memberTool name="select_even"/>
  </toolshelf>

  <tool name="divide_edges" label="Divide Edges" icon="SOP_edgedivide">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'mifth_divide_edges')
]]></script>
  </tool>

  <tool name="scale_edges" label="Scale Edges" icon="SOP_edgeflip">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

#viewer = toolutils.sceneViewer()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_scale_edges')
#node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="transform_primitives" label="TransformPrims" icon="SOP_primitive">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

#viewer = toolutils.sceneViewer()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_transform_primitives')
#node.parm('group').set(sel_str)]]></script>
  </tool>

  <tool name="merge_verts" label="Merge Verts" icon="SOP_fuse">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

#viewer = toolutils.sceneViewer()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_merge_verts')

if not kwargs['ctrlclick']:
    node.parm('merge_type').set('last')
]]></script>
  </tool>

  <tool name="symmetry_extrude" label="SymExtrude" icon="SOP_polyextrude">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

#viewer = toolutils.sceneViewer()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()

if kwargs['ctrlclick']:
    node = soptoolutils.genericTool(kwargs, 'mifth_symmetry_extrude_v1')
    #node.parm('group').set(sel_str)
else:
    soptoolutils.customStateTool(kwargs, 'polyextrude::2.0')]]></script>
  </tool>

  <tool name="edges_to_face" label="EdgesToFace" icon="SOP_polycap">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

#viewer = toolutils.sceneViewer()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()

node = soptoolutils.genericTool(kwargs, 'mifth_edgestoface')
#node.parm('group').set(sel_str)
]]></script>
  </tool>

  <tool name="part_mesh" label="PartMesh" icon="SOP_blast">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()
print viewer
sel_nodes = hou.selectedNodes()

if sel_str and sel_nodes:

    main_node = sel_nodes[-1]

    if kwargs['ctrlclick'] and geo.geometryType() == hou.geometryType.Primitives:
        blast_2 = main_node.parent().createNode('blast', node_name='blast_base')
        blast_2.parm('negate').set(False)
        blast_2.parm('group').set(sel_str)
        blast_2.setNextInput(main_node)
        blast_2.moveToGoodPosition()

    if geo.geometryType() == hou.geometryType.Edges:
        blast_1 = main_node.parent().createNode('mifth_extract_edges', node_name='extract_edges')

    else:
        blast_1 = main_node.parent().createNode('blast', node_name='blast_part')
        blast_1.parm('negate').set(True)

    blast_1.parm('group').set(sel_str)
    blast_1.setNextInput(main_node)
    blast_1.setCurrent(True, clear_all_selected=True)
    blast_1.moveToGoodPosition()

    final_merge = main_node.parent().createNode("merge")
    final_merge.setDisplayFlag(True)
    final_merge.setRenderFlag(True)

    if kwargs['ctrlclick']:
        if geo.geometryType() == hou.geometryType.Primitives:
            final_merge.setNextInput(blast_2)
    else:
        final_merge.setNextInput(main_node)

    final_merge.setNextInput(blast_1)
#    final_merge.setTemplateFlag(True)

    final_merge.moveToGoodPosition()
]]></script>
  </tool>

  <tool name="pivot_center" label="PivotToCenter" icon="OBJ_null">
    <script scriptType="python"><![CDATA[sel_nodes = hou.selectedNodes()

for node in sel_nodes:
    if node.parmTuple('p'):
        if kwargs['ctrlclick']:
            node.parm('px').setExpression('$GCX')
            node.parm('py').setExpression('$GCY')
            node.parm('pz').setExpression('$GCZ')
        else:
            node.parm('px').setExpression('$CEX')
            node.parm('py').setExpression('$CEY')
            node.parm('pz').setExpression('$CEZ')]]></script>
  </tool>

  <tool name="pivot_selected" label="PivotCenter" icon="OBJ_null">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()

sel_nodes = hou.selectedNodes()

if sel_nodes:
    last_node = sel_nodes[-1]

    if last_node.parmTuple('p'):

        if kwargs['shiftclick']:
    
            geo = viewer.selectGeometry()
            sel_str = geo.mergedSelectionString()
    
            if sel_str:
                blast_node = last_node.parent().createNode('blast')
                blast_node.setNextInput(last_node)
        
                # fix for changing group for Points only
                if geo.geometryType() == hou.geometryType.Points:
                    blast_node.parm('grouptype').set(3)
        
                blast_node.parm('group').set(sel_str)
                blast_node.parm('negate').set(True)
        
                blast_node.moveToGoodPosition()
        
                trans_node = blast_node.createOutputNode('xform')
                trans_node.parm('px').setExpression('$CEX')
                trans_node.parm('py').setExpression('$CEY')
                trans_node.parm('pz').setExpression('$CEZ')
                trans_node.parmTuple('s').set((0, 0, 0))
        
                trans_node.moveToGoodPosition()
        
                p_pos = trans_node.geometry().points()[0].position()
                last_node.parmTuple('p').deleteAllKeyframes()
                last_node.parmTuple('p').set(p_pos)
        
                trans_node.destroy()
                blast_node.destroy()
    
        else:
            if kwargs['ctrlclick']:
                last_node.parm('px').setExpression('$GCX')
                last_node.parm('py').setExpression('$GCY')
                last_node.parm('pz').setExpression('$GCZ')
            else:
                last_node.parm('px').setExpression('$CEX')
                last_node.parm('py').setExpression('$CEY')
                last_node.parm('pz').setExpression('$CEZ')]]></script>
  </tool>

  <tool name="merge" label="Merge" icon="SOP_merge">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
      <contextNetType>DOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="cop_viewer">
      <contextNetType>COP2</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[sel_nodes = hou.selectedNodes()

if sel_nodes and len(sel_nodes) > 1:

    merge_node = sel_nodes[-1].parent().createNode('merge')
    merge_node.moveToGoodPosition()

    for node in sel_nodes:
        merge_node.setNextInput(node)

    merge_node.moveToGoodPosition()]]></script>
  </tool>

  <tool name="set_plane" label="SetPlane" icon="OBJ_null">
    <script scriptType="python"><![CDATA[import toolutils
import soptoolutils

def set_origin(construction_plane, new_origin):
    translation = hou.hmath.buildTranslate(hou.Vector3(new_origin) - origin(construction_plane))
    construction_plane.setTransform(construction_plane.transform() * translation)

def origin(construction_plane):
    return hou.Vector3(0, 0, 0) * construction_plane.transform()

def set_normal(construction_plane, normal_vector):
    existing_rotation = hou.Matrix4(construction_plane.transform().extractRotationMatrix3())
    rotation = existing_rotation * normal(construction_plane).matrixToRotateTo(normal_vector)
    translation = hou.hmath.buildTranslate(origin(construction_plane))
    construction_plane.setTransform(rotation * translation)

def set_direct_normal(construction_plane, normal_vector):
    rotation = hou.Vector3(0, 0, 1).matrixToRotateTo(normal_vector)
    translation = hou.hmath.buildTranslate(origin(construction_plane))
    construction_plane.setTransform(rotation * translation)

def normal(construction_plane):
    return hou.Vector3(0, 0, 1) * construction_plane.transform().inverted().transposed()

def origin(construction_plane):
    return hou.Vector3(0, 0, 0) * construction_plane.transform()


sv = toolutils.sceneViewer()
cp = sv.constructionPlane()
#sel_nodes = hou.selectedNodes()

if kwargs['ctrlclick']:
    cp.setTransform(sv.curViewport().viewTransform())
    set_origin(cp, sv.curViewport().viewPivot() )

elif kwargs['shiftclick']:
    cp.setTransform(hou.Vector3(0, 0, 1).matrixToRotateTo(hou.Vector3(0, 1, 0)))

else:
    cp.setTransform(sv.curViewport().viewTransform())
    set_origin(cp, sv.curViewport().viewPivot() )

    cp_n = normal(cp)
    cp_axis = 'x'

    if abs(cp_n[1]) > abs(cp_n[0]) and abs(cp_n[1]) > abs(cp_n[2]):
        cp_axis = 'y'
    if abs(cp_n[2]) > abs(cp_n[0]) and abs(cp_n[2]) > abs(cp_n[1]):
        cp_axis = 'z'

    if cp_axis == 'x':
        set_direct_normal(cp, hou.Vector3(1, 0, 0))
    elif cp_axis == 'y':
        set_direct_normal(cp, hou.Vector3(0, 1, 0))
    elif cp_axis == 'z':
        set_direct_normal(cp, hou.Vector3(0, 0, 1))]]></script>
  </tool>

  <tool name="subdive" label="Subdive" icon="SOP_subdivide">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'mifth_subdive_plus')]]></script>
  </tool>

  <tool name="falloff" label="Faloff" icon="SOP_edit">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

if kwargs['ctrlclick']:
    node = soptoolutils.genericTool(kwargs, 'mifth_edit_radial_falloff')

    bou = node.node('./bound1').geometry().boundingBox()
    bou_size = bou.sizevec()
    bou_min = bou.minvec()
    bou_max = bou.maxvec()
    bou_cr = bou.center()

    the_max = max( max(bou_size[0], bou_size[1]), bou_size[2])

    node.parm('set_to_size').pressButton()
    node.parmTuple('falloff_scale').set(hou.Vector3(the_max/2, the_max/2, the_max/2))

    node.parmTuple('p').set( node.parmTuple('falloff_pos').eval() )

else:
    node = soptoolutils.genericTool(kwargs, 'mifth_edit_falloff')

    c = node.parmTuple('./transform2/p').eval()
    node.parmTuple('p').set(c)

    bou = node.node('./bound1').geometry().boundingBox()
    bou_size = bou.sizevec()
    if bou_size[0] >= bou_size[1] and bou_size[0] >= bou_size[2]:
        node.parm('set_to_axis').set(0)
    elif bou_size[1] >= bou_size[0] and bou_size[1] >= bou_size[2]:
        node.parm('set_to_axis').set(1)
    else:
        node.parm('set_to_axis').set(2)

    node.parm('set_pos_axis').pressButton()
]]></script>
  </tool>

  <tool name="select_even" label="Select Even" icon="PLASMA_App">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
viewer_state = viewer.currentState()

geos = viewer.selectGeometry()

node = geos.nodes()[0]
geo = node.geometry()

prims = geo.selection().prims(geo)
#prims = geo.globPrims(geos.selectionStrings()[0])

loop_1 = geo.primLoop([prims[-2], prims[-1]], hou.componentLoopType.Partial)
loop_2 = geo.primLoop([prims[-2], prims[-1]], hou.componentLoopType.Extended)

offset = (len(loop_1) * 2) - 2

if offset <= len(loop_2)-1:

    loop_3 = geo.primLoop([prims[-1], loop_2[offset]], hou.componentLoopType.Partial)

    if len(loop_1) == len(loop_3):
        new_sel = list(prims)
        new_prim = loop_2[offset]

        numz = []
        for prim in new_sel:
            numz.append(prim.number())

        if new_prim.number() not in numz:
            nes_sel_str = geos.selectionStrings()[0] + " " + str(new_prim.number())

            node.setSelection(hou.Selection(geo, hou.geometryType.Primitives, nes_sel_str )) 

viewer.setCurrentState(viewer_state)]]></script>
  </tool>

  <tool name="arc" label="Arc" icon="SOP_circle">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

node = soptoolutils.genericTool(kwargs, 'mifth_make_arc')]]></script>
  </tool>
</shelfDocument>
