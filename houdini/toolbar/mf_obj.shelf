<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="mf_obj" label="MObj">
    <memberTool name="instance"/>
    <memberTool name="geom_converter"/>
    <memberTool name="scale_100"/>
  </toolshelf>

  <tool name="instance" label="Instance" icon="OBJ_instance">
    <script scriptType="python"><![CDATA[sel_nodes = hou.selectedNodes()
out_obj = hou.node('/out')
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()

if cur_obj.childTypeCategory().name() == 'Object' and sel_nodes:

    for node in sel_nodes:

        obj_source = node
        obj_inst = cur_obj.createNode("instance")
    
        if obj_source.type().name() == 'instance':
            obj_inst.parm('instancepath').set(obj_source.parm('instancepath').eval())
        else:
            #obj_inst.parm('instancepath').set(obj_source.path())
    
            obj_inst.parmTuple('i_t').set(obj_source.parmTuple('t').eval())
            obj_inst.parmTuple('i_r').set(obj_source.parmTuple('r').eval())
            obj_inst.parmTuple('i_s').set(obj_source.parmTuple('s').eval())
            #obj_inst.parmTuple('i_p').set(obj_source.parmTuple('p').eval())
            obj_inst.parm('i_scale').set(obj_source.parm('scale').eval())
        
            obj_inst.setName(obj_source.name(), unique_name=True)
        
            attr_cr = obj_inst.children()[0].createOutputNode('attribcreate')
            attr_cr.parm('type1').set(3)
            attr_cr.parm('name1').set('instancepath')
            attr_cr.parm('string1').set('op:../../../' + obj_source.name())
        
            instance = attr_cr.createOutputNode('instance')
            instance.setDisplayFlag(True)
            instance.setRenderFlag(True)
        
        obj_inst.moveToGoodPosition()
        obj_inst.setSelected(True, clear_all_selected=False)
        obj_source.setSelected(False, clear_all_selected=False)
]]></script>
  </tool>

  <tool name="geom_converter" label="GeomConvert" icon="SOP_object_merge">
    <script scriptType="python"><![CDATA[import exchanger
import os

def make_merge(final_merge, new_node, node_to_merge):
    merge_node = new_node.createNode("object_merge", node_name=node_to_merge.name())

    merge_path = node_to_merge.path()
    if node_to_merge.type().name() == "subnet":
        merge_path += "/*"

    if kwargs['ctrlclick']:
        merge_node.parm('pack').set(True)

    merge_node.parm('objpath1').set(merge_path)
    merge_node.parm('xformtype').set(1)
    #merge_node.setName(node_to_merge.name())
    merge_node.moveToGoodPosition()

    group_node = merge_node.createOutputNode("group", node_name=node_to_merge.name())
    group_node.parm('crname').set(node_to_merge.name())

    final_merge.setNextInput(group_node)

    if node_to_merge.type().name() == "subnet":
        for node in node_to_merge.children():
            if node.type().name() == "subnet":
                make_merge(final_merge, new_node, node)


exchange_dir = exchanger.get_exchange_path().replace("\\", os.sep)
if exchange_dir.endswith(os.sep) is False:
    exchange_dir += os.sep

ex_path = exchange_dir + "exchange.fbx"
main_obj = hou.node('/obj')
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()
sel_nodes = hou.selectedNodes()

if cur_obj.childTypeCategory().name() == 'Object' and sel_nodes:
    new_node = cur_obj.createNode('geo', 'mereged_objects', run_init_scripts=False)
    new_node.moveToGoodPosition()
    new_node.parm('use_dcolor').set(False)
    final_merge = new_node.createNode("merge")

    for node in sel_nodes:
        make_merge(final_merge, new_node, node)

    final_merge.moveToGoodPosition()
    attrib_del = final_merge.createOutputNode('attribdelete')
    attrib_del.parm('vtxdel').set('Cd')

    attrib_del.moveToGoodPosition()

    attrib_del.setDisplayFlag(True)
    attrib_del.setRenderFlag(True)]]></script>
  </tool>

  <tool name="scale_100" label="Scale100" icon="SOP_xform">
    <script scriptType="python"><![CDATA[sel_nodes = hou.selectedNodes()
out_obj = hou.node('/out')
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()

if cur_obj.childTypeCategory().name() == 'Object' and sel_nodes:
    for obj_node in sel_nodes:
#        for sop_node in obj_node.children():
        sop_node = obj_node.displayNode()
        print sop_node.name()
        trans_node = sop_node.createOutputNode("xform")
        if kwargs['ctrlclick']:
            trans_node.parm('scale').set(0.01)
        else:
            trans_node.parm('scale').set(100)

        trans_node.moveToGoodPosition()
        trans_node.setDisplayFlag(True)
        trans_node.setRenderFlag(True)
else:
    msg = 'Select Object Nodes!'
    hou.ui.displayMessage(msg)]]></script>
  </tool>
</shelfDocument>
