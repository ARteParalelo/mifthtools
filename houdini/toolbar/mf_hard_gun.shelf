<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="hard_gun" label="Hard Gun">
    <memberTool name="hard_gun_bool"/>
    <memberTool name="hard_gun_prim"/>
  </toolshelf>

  <tool name="hard_gun_bool" label="HardGunBool" icon="SOP_boolean-2.0">
    <toolMenuContext name="viewer">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextNetType>SOP</contextNetType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
sel_nodes = hou.selectedNodes()
geo = viewer.selectGeometry()
sel_str = geo.mergedSelectionString()

mesh_length = 100

if sel_nodes and len(sel_nodes) == 2:

    n_mesh = sel_nodes[1]
    n_mesh_2 = sel_nodes[0]

    n_mesh.setSelectableTemplateFlag(False)
    n_mesh.setTemplateFlag(False)

    # if mesh is an open curve'
    if n_mesh_2.type().name() == 'curve':
        n_mesh_2.parm('close').set(True)

        normal_node = n_mesh_2.createOutputNode("normal")
        normal_node.parm('type').set(0)
        normal_node.setColor( hou.Color((0.9, 0.72, 0.4)) )
        

        attr_prom = normal_node.createOutputNode("attribpromote")
        attr_prom.parm('inname').set('N')
        attr_prom.parm('inclass').set(2)
        attr_prom.parm('outclass').set(0)
        attr_prom.parm('method').set(2)
        attr_prom.parm('useoutname').set(True)
        attr_prom.parm('outname').set('pr_n')
        attr_prom.parm('deletein').set(True)
        attr_prom.setColor( hou.Color((0.9, 0.72, 0.4)) )
        
        trans_axis = attr_prom.createOutputNode("xformaxis")
        trans_axis.parm('origx').setExpression('$GCX')
        trans_axis.parm('origy').setExpression('$GCY')
        trans_axis.parm('origz').setExpression('$GCZ')
        trans_axis.parm('dirx').setExpression('@pr_n.x')
        trans_axis.parm('diry').setExpression('@pr_n.y')
        trans_axis.parm('dirz').setExpression('@pr_n.z')
        trans_axis.parm('trans').set(-mesh_length)
        trans_axis.parm('scale').set(0)
        trans_axis.setColor( hou.Color((0.9, 0.72, 0.4)) )
        

        extr_node = trans_axis.createOutputNode("polyextrude::2.0")
        extr_node.parm('outputback').set(True)
        extr_node.parm('xformfront').set(True)
        extr_node.parm('xformspace').set(0)
        extr_node.parm('translatez').set(mesh_length * 2)
        #extr_node.parm('dist').set(mesh_length * 2)
        extr_node.setColor( hou.Color((0.9, 0.72, 0.4)) )
    
        second_node = extr_node
    else:
        second_node = n_mesh_2

    choice = hou.ui.displayMessage("Mirror First Mesh?", buttons=("No", "X", "Y", "Z"))

    if choice in (1, 2, 3):
        choice_clip = hou.ui.displayMessage("Clip First Mesh?", buttons=("Yes", "No",))

        # add clip
        if choice_clip == 0:
            clip_node = second_node.createOutputNode("clip")

            if choice == 1:
                clip_node.parmTuple('dir').set((1, 0, 0))
            elif choice == 2:
                clip_node.parmTuple('dir').set((0, 1, 0))
            elif choice == 3:
                clip_node.parmTuple('dir').set((0, 0, 1))

            clip_node.setColor( hou.Color((0.8, 0.65, 0.9)) )

            mir_node = clip_node.createOutputNode("mirror")

        # no clip
        else:
            mir_node = second_node.createOutputNode("mirror")
            mir_node.parm('consolidatepts').set(False)

        if choice == 2:
            mir_node.parmTuple('dir').set( (0, 1, 0) )
        elif choice == 3:
            mir_node.parmTuple('dir').set( (0, 0, 1) )

        mir_node.setColor( hou.Color((0.8, 0.65, 0.9)) )
        second_node = mir_node
    

    b_group = n_mesh.createOutputNode("groupcreate")
    b_group.parm('groupname').set('hard_gun')
    b_group.parm('grouptype').set(0)
    b_group.parm('basegroup').set(sel_str)
    b_group.setColor( hou.Color((0.9, 0.65, 0.8)) )

    b_connect = b_group.createOutputNode("connectivity")
    b_connect.parm('connecttype').set(1)
    b_connect.setColor( hou.Color((0.8, 0.65, 0.9)) )
#    bool_node.moveToGoodPosition()

    b_block_begin = b_connect.createOutputNode("block_begin")
    b_block_begin.parm('method').set(1)
    b_block_begin.setColor( hou.Color((0.8, 0.65, 0.9)) )

    bool_node = b_block_begin.createOutputNode("boolean::2.0")
    bool_node.parm('agroup').set('hard_gun')
    #bool_node.parm('resolvea').set(False)
    bool_node.parm('resolveb').set(False)
    bool_node.parm('booleanop').set(2)
    bool_node.setNextInput(second_node)
    bool_node.setColor( hou.Color((0.9, 0.65, 0.8)) )

    b_block_end = bool_node.createOutputNode("block_end")
    b_block_end.parm('itermethod').set(1)
    b_block_end.parm('method').set(1)
    b_block_end.parm('class').set(0)
    b_block_end.parm('useattrib').set(1)
    b_block_end.parm('attrib').set('class')
    b_block_end.parm('blockpath').set('../' + b_block_begin.name())
    b_block_end.parm('templatepath').set('../' + b_block_begin.name())
    b_block_end.setColor( hou.Color((0.8, 0.65, 0.9)) )

    b_block_begin.parm('blockpath').set('../' + b_block_end.name())

    # make new connections for the merge node
    for connects in n_mesh.outputConnections():
        out_node = connects.outputNode()
        in_idx = connects.inputIndex()
        out_idx = connects.outputIndex()

        if out_node.name() != b_group.name():
            out_node.setInput(out_idx, b_block_end, in_idx)
            out_node.moveToGoodPosition()

    #b_block_end.setDisplayFlag(True)
    #b_block_end.setRenderFlag(True)
    b_block_end.setCurrent(True, clear_all_selected=True)

else:
    msg = 'Select 2 SOP Nodes!'
    hou.ui.displayMessage(msg)]]></script>
  </tool>

  <tool name="hard_gun_prim" label="HardGunPrim" icon="SOP_box">
    <script scriptType="python"><![CDATA[import soptoolutils
import toolutils

viewer = toolutils.sceneViewer()
#sel_nodes = hou.selectedNodes()
#geo = viewer.selectGeometry()
#sel_str = geo.mergedSelectionString()
cur_obj = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor).pwd()

choice = hou.ui.displayMessage("Mirror?", buttons=("Curve", "Box", "Tube", "Sphere", "Grid", "Circle"))

cur_snap = viewer.snappingMode()
viewer.setSnappingMode(hou.snappingMode.Prim)

if choice != 0:
    positions = viewer.selectPositions(number_of_positions=2, connect_positions=True, show_coordinates=True, position_type=hou.positionType.WorldSpace)
    prim_size = (positions[0] - positions[1]).length()
    if prim_size == 0:
        prim_size = 1

if choice == 0:
    box = cur_obj.createNode('curve')
    box.moveToGoodPosition()
    box.setCurrent(True, clear_all_selected=False)

elif choice == 1:
    box = cur_obj.createNode('box')
    box.moveToGoodPosition()
    box.setCurrent(True, clear_all_selected=False)
    box.parmTuple('t').set(positions[0])
    box.parmTuple('size').set( (prim_size, prim_size, prim_size) )

elif choice == 2:
    tube_nd = cur_obj.createNode('tube')
    tube_nd.moveToGoodPosition()
    tube_nd.setCurrent(True, clear_all_selected=False)
    tube_nd.parmTuple('t').set(positions[0])
    tube_nd.parm('type').set(1)
    tube_nd.parm('rad1').set(prim_size)
    tube_nd.parm('rad2').set(prim_size)
    tube_nd.parm('height').set(prim_size)
    tube_nd.parm('cols').set(30)
    tube_nd.parm('cap').set(1)

elif choice == 3:
    sphere = cur_obj.createNode('sphere')
    sphere.moveToGoodPosition()
    sphere.setCurrent(True, clear_all_selected=False)
    sphere.parmTuple('t').set(positions[0])
    sphere.parm('type').set(2)
    sphere.parmTuple('rad').set( (prim_size, prim_size, prim_size) )
    sphere.parm('rows').set(15)
    sphere.parm('cols').set(30)

elif choice == 4:
    grid = cur_obj.createNode('grid')
    grid.moveToGoodPosition()
    grid.setCurrent(True, clear_all_selected=False)
    grid.parmTuple('t').set(positions[0])
    grid.parmTuple('size').set( (prim_size, prim_size) )
    grid.parm('rows').set(2)
    grid.parm('cols').set(2)

elif choice == 5:
    circle = cur_obj.createNode('circle')
    circle.moveToGoodPosition()
    circle.setCurrent(True, clear_all_selected=False)
    circle.parmTuple('t').set(positions[0])
    circle.parm('type').set(1)
    circle.parmTuple('rad').set( (-prim_size, prim_size) )
    circle.parm('divs').set(30)
    circle.parm('orient').set(2)

viewer.setSnappingMode(cur_snap)
]]></script>
  </tool>
</shelfDocument>
